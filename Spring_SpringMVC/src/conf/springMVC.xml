<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 配置注解扫描 开启扫描 加上@Controller 的注解的类作为springMVC的控制层  -->
    <context:component-scan base-package="com.DanceBytes.controller"></context:component-scan>

    <!--配置视图解释器，进行页面的跳转-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--跳转的页面的路径-->
        <property name="prefix" value="/WEB-INF/view/" />
        <!--跳转的页面的后缀名称-->
        <property name="suffix" value=".jsp" />
    </bean>


    <!-- Tomcat 处理静态资源
        配置Tomcat的servlet，DefaultServlet
        注意 当DefaultServlet所设置的<url-pattern>的值 与 开发人员的配置的servlet的<url-pattern>相同 以开发人员配置的servlet优先
        当客户端发送请求，由于DefaultServlet所设置的<url-pattern>的值 与 开发人员的配置DispatcherServlet的servlet的<url-pattern>都是/
        因此会先通过DispatcherServlet处理请求，找该请求是否有相对应的处理器，有责处理，无则交给DispatcherServlet处理

        若DispatcherServlet无法处理，就会交给默认的servlet处理（如果没配置默认的servlet，页面404，报NoMapping），能处理就处理了，若不能就报404，不会有mapping
     -->
    <!-- 默认的servlet -->
    <mvc:default-servlet-handler/>
    <!-- mvc驱动 -->
    <mvc:annotation-driven/>

    <!-- 文件上传 将File文件 处理为 MultipartFile文件 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 下面两行一般都不写 -->
        <!-- 设置文件解析的编码 要跟页面的编码一致 -->
        <!-- <property name="defaultEncoding" value="UTF-8"/>-->
        <!-- 设置最大文件上传大小 -->
        <!-- <property name="maxUploadSize" value="88888888"/>-->
    </bean>


<!--    &lt;!&ndash; 设置拦截器 &ndash;&gt;-->
<!--    <mvc:interceptors>-->
<!--        &lt;!&ndash; 下面2个 全都是默认拦截所有请求 &ndash;&gt;-->
<!--        <bean class="com.DanceBytes.interceptor.FirstInterceptor"/>-->
<!--        <bean class="com.DanceBytes.interceptor.SecondInterceptor"/>-->
<!--        &lt;!&ndash; 此方式要求拦截器必须加注解 @Component &ndash;&gt;-->
<!--        &lt;!&ndash; <ref bean="firstInterceptor"/>&ndash;&gt;-->

<!--        &lt;!&ndash; 设置 自定义拦截方式 &ndash;&gt;-->
<!--&lt;!&ndash;        <mvc:interceptor>&ndash;&gt;-->
<!--&lt;!&ndash;            <bean/>&ndash;&gt;-->
<!--&lt;!&ndash;            <mvc:mapping path=""/>&ndash;&gt;-->
<!--&lt;!&ndash;            <mvc:exclude-mapping path=""/>&ndash;&gt;-->
<!--&lt;!&ndash;        </mvc:interceptor>&ndash;&gt;-->
<!--    </mvc:interceptors>-->

    <!-- 配置异常处理 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.NullPointerException">error</prop>
            </props>
        </property>
    </bean>
</beans>